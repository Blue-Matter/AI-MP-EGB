install.packages(DLMtool)
library(DLMtool)
testdat<-XL2Data('C:/temp/Simulation_1.csv')
Can(testdat)
Cant(testdat)                                 # MPs cthat cannot be applied
Needed(testdat)                               # Data Required to get the cant MPs working
runMP(testdat)
data.table(testdat)
install.packages('DLMtool')                   # Install DLMtool R package
library(DLMtool)                              # Load the library
testdat<-XL2Data('C:/temp/Simulation_1.csv')  # Load your data
Can(testdat)                                  # MPs that can be applied
Cant(testdat)                                 # MPs cthat cannot be applied
Needed(testdat)                               # Data Required to get the cant MPs working
runMP(testdat)                                # Calculate management advice for all MPs
install.packages("DLMtool")
class?Data
install.packages("Rcpp")
library("Rcpp")
install.packages("devtools")
devtools::install_github("rstudio/reticulate", force=TRUE)
devtools::install_github("r-lib/processx")
library(processx)
devtools::install_github("rstudio/tensorflow")
devtools::install_github("rstudio/keras")
library(keras)
install_keras(tensorflow = "gpu")
#install_keras(method = c("auto", "virtualenv", "conda"), conda = "auto",  tensorflow = "gpu", extra_packages = NULL)
library(tensorflow)
install_tensorflow(version="gpu")
install.packages("devtools")
install.packages("tensorflow")
install.packages("tensorflow")
install.packages("tensorflow")
install.packages("keras")
install.packages("Rcpp")
library("Rcpp")
install.packages("devtools")
devtools::install_github("rstudio/reticulate", force=TRUE)
install.packages("Rcpp")
library("Rcpp")
install.packages("Rcpp")
library("Rcpp")
install.packages("devtools")
devtools::install_github("rstudio/reticulate", force=TRUE)
devtools::install_github("r-lib/processx")
library(processx)
devtools::install_github("rstudio/tensorflow")
devtools::install_github("rstudio/tensorflow")
devtools::install_github("DLMtool/DLMtool")
install.packages('ps')
devtools::install_github("DLMtool/DLMtool")
library(openMSE)
library("Rcpp")
library(processx)
library(keras)
library(tensorflow)
library(reticulate)
library(dplyr)
library(tfdatasets)
library(ggplot2)
library(progress)
setwd("C:/Users/tcarruth/Documents/GitHub/AI-MP-EGB")
source("./Source/MSEplots.R")
# --- get MPs ---------------------------------------------------
source("./Source/MPs.R")
maketestdata<-F
source("./Source/MSEplots.R")
# --- get MPs ---------------------------------------------------
source("./Source/MPs.R")
OM<-SubCpars(readRDS("./Operating_Models/Base_dat.rda"),sims=1:2)
OM@seed<-1
dim(OM@cpars$Data@AddInd)
pBs<-function(x,y,plot=F,enp.mult=0.6,family="gaussian",inter=1){
if(plot)plot(x,y,pch=19,cex=1)
mod<-loess(y~x,data.frame(x=x,y=y),enp.target=length(x)*enp.mult,family=family)
newdata<-data.frame(x=seq(min(x),max(x),length.out=length(x)*inter))
py=predict(mod,newdata)
if(plot)lines(newdata$x,py,col="red")
cbind(x=newdata$x,y=py)
}
slp3<-function(y){
y<-y[!is.na(y)]
y<-log(y)
x1<-1:length(y)
mux<-mean(x1)
muy<-mean(y,na.rm=T)
SS<-sum((x1-mux)^2,na.rm=T)
(1/SS)*sum((x1-mux)*(y-muy),na.rm=T)
}
PBS<-function(x,Data,reps=1,enp.mult=0.6,yrec=3,startTAC=14){
ny<-length(Data@Year)
if(ny==51){
oldTAC=startTAC*1000#Data@Cat[x,51]
}else{
oldTAC=Data@MPrec[x]
}
Rec<-new('Rec')
Binds<-Data@AddInd[x,25:27,]
muInd<-apply(Binds,2,mean,na.rm=T)
prInd<-muInd[!is.na(muInd)]
y<-pBs(x=1:length(prInd),prInd,enp.mult = enp.mult)[,2]
ydat<-y[length(y)-(0:(yrec-1))]
slp<-slp3(log(ydat))
oldTAC*exp(slp)
Rec@TAC<-oldTAC*exp(slp)
Rec
}
class(PBS)<-"MP"
PBS_6<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=6)
PBS_10<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=10)
PBS_15<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=15)
class(PBS_6)<-class(PBS_10)<-class(PBS_15)<-"MP"
PBS_6<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=6)
PBS_10<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=10)
PBS_14<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=15)
class(PBS_6)<-class(PBS_10)<-class(PBS_14)<-"MP"
OM<-SubCpars(readRDS("./Operating_Models/Base_dat.rda"),sims=1:2)
OM@seed<-1
Hist2<-runMSE(OM,Hist=T,extended=T)
MSEtest3=Project(Hist2,MPs=c(paste0("PBS_",c(6,10,14)),paste0("PI_",c(3,5,9)),paste0("AI1_",c(3,5,9))))#MSEtest=Project(Hist2,MPs="AI_5")
TplotAI(MSEtest3)
OM<-SubCpars(readRDS("./Operating_Models/Base_dat.rda"),sims=1:12)
OM@seed<-1
Hist2<-runMSE(OM,Hist=T,extended=T)
PBS_5<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=5)
PBS_10<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=10)
PBS_20<-function(x,Data,reps=1)PBS(x=x,Data=Data,reps=reps,startTAC=20)
class(PBS_5)<-class(PBS_10)<-class(PBS_20)<-"MP"
MSEtest3=Project(Hist2,MPs=c(paste0("PBS_",c(5,10,20)),paste0("PI_",c(3,5,9)),paste0("AI1_",c(3,5,9))))#MSEtest=Project(Hist2,MPs="AI_5")
AI_CU<-function(x,Data,reps=1,targF=0.2,wts=c(0,1),nHy=51,dosmth=F,enp.mult=0.3){ # x=1; reps=1
termyr<-dim(Data@AddInd)[3]
curyr<-ncol(Data@Cat)                           # get current year
ny<-curyr-nHy+1
test_data<-makeNNdat(x,Data)
new_df <- test_data %>% as_tibble(.name_repair = "minimal") %>%
setNames(colnames(test_data)) %>%  mutate(label = as.numeric(c(2.0,2.0)))
selecto<-dplyr::select
predBt<- AIEGB %>% predict(new_df %>% selecto(-label))
VBest<-exp(predBt[1,1])*1000
TACrec=VBest*targF
calcs=unlist(Data@Misc[[x]])
lastcalc=calcs[length(calcs)]
Rec<-new('Rec')
if(ny==1)Rec@TAC<-TACrec
if(ny>1)Rec@TAC<-weighted.mean(c(lastcalc,TACrec),w=wts)
if(dosmth){
if(ny>5){
#print(c(calcs,TACrec))
smrec<-smooth(c(calcs,TACrec),plot=F,enp.mult=enp.mult)
Rec@TAC<-smrec[length(smrec)]
}
}
#Rec@TAC<-TACrec
#print(targF)
saveRDS(Data,"C:/temp/Data.rda")
Rec<-send_info(x=x,Data=Data,newinfo=TACrec,Rec=Rec)
print(Rec@Misc[[1]])
Rec
}
class(AI_CU)<-"MP"
MSEtest3=Project(Hist2,MPs=c(paste0("PBS_",c(5,10,20)),paste0("PI_",c(3,5,9)),paste0("AI1_",c(3,5,9))))#MSEtest=Project(Hist2,MPs="AI_5")
AI_CU<-function(x,Data,reps=1,targF=0.2,wts=c(0,1),nHy=51,dosmth=F,enp.mult=0.3){ # x=1; reps=1
termyr<-dim(Data@AddInd)[3]
curyr<-ncol(Data@Cat)                           # get current year
ny<-curyr-nHy+1
test_data<-makeNNdat(x,Data)
new_df <- test_data %>% as_tibble(.name_repair = "minimal") %>%
setNames(colnames(test_data)) %>%  mutate(label = as.numeric(c(2.0,2.0)))
selecto<-dplyr::select
predBt<- AIEGB %>% predict(new_df %>% selecto(-label))
VBest<-exp(predBt[1,1])*1000
TACrec=VBest*targF
calcs=unlist(Data@Misc[[x]])
lastcalc=calcs[length(calcs)]
Rec<-new('Rec')
if(ny==1)Rec@TAC<-TACrec
if(ny>1)Rec@TAC<-weighted.mean(c(lastcalc,TACrec),w=wts)
if(dosmth){
if(ny>5){
#print(c(calcs,TACrec))
smrec<-smooth(c(calcs,TACrec),plot=F,enp.mult=enp.mult)
Rec@TAC<-smrec[length(smrec)]
}
}
#Rec@TAC<-TACrec
#print(targF)
#saveRDS(Data,"C:/temp/Data.rda")
Rec<-send_info(x=x,Data=Data,newinfo=TACrec,Rec=Rec)
#print(Rec@Misc[[1]])
Rec
}
class(AI_CU)<-"MP"
MSEtest3=Project(Hist2,MPs=c(paste0("PBS_",c(5,10,20)),paste0("PI_",c(3,5,9)),paste0("AI1_",c(3,5,9))))#MSEtest=Project(Hist2,MPs="AI_5")
TplotAI(MSEtest3)
OM<-SubCpars(readRDS("./Operating_Models/Base_dat.rda"),sims=13:36)
OM@seed<-1
Hist3<-runMSE(OM,Hist=T,extended=T)
MSEtest3b=Project(Hist3,MPs=c(paste0("PBS_",c(5,10,20)),paste0("PI_",c(3,5,9)),paste0("AI1_",c(3,5,9))))#MSEtest=Project(Hist2,MPs="AI_5")
?joinMSE
MSEtest3all<-joinMSE(list(MSEtest3,MSEtest3b))
MSEtest3all@nsim
TplotAI(MSEtest3all)
saveRDS(MSEtest3all,"C:/temp/MSEtest3all.rda")
